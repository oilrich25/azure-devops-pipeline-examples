trigger:
  - main

pool: 'Anka macOS'

parameters:
  - name: anka_vm_registry_address
    displayName: "Anka Registry Endpoint"
    type: string
    default: 'https://anka.registry:8089'
  - name: anka_vm_name
    displayName: "Anka VM Template Name or UUID"
    type: string
    default: '12.7.2'
  - name: anka_vm_tag_name
    displayName: "Anka VM Template Name or UUID"
    type: string
    default: 'vanilla+port-forward-22+brew-git'
  - name: lane_name
    displayName: "Fastlane Lane Name"
    type: string
    default: ''
  - name: lane_parameters
    displayName: "Fastlane Parameters"
    type: string
    default: ''
  - name: publishFolder
    displayName: "Artifact Publish Folder"
    type: string
    default: ''
  - name: artifactFolderName
    displayName: "Artifact Folder Name"
    type: string
    default: 'Artifacts'
  - name: publishTest
    displayName: "Publish Test Name"
    type: string
    default: ''
  - name: publishCodeCoverageFolderName
    displayName: "Publish Code Coverage Name"
    type: string
    default: ''
  - name: rubyVersion
    displayName: "Ruby Version"
    type: string
    default: 'ruby-2.7.0'
  - name: match_pass_key
    displayName: "Publish Code Coverage Name"
    type: string
    default: 'Password Here'
  - name: git_token_key
    displayName: "Git Token"
    type: string
    default: 'Token Here'

steps:

  - task: Bash@3
    displayName: 'ðŸ”’ Create Anka VM'
    inputs:
      targetType: 'inline'
      script: |
        set -x
        # This script will get the latest anka template, we need to make sure only one template is pulled at a time on a machine.
        
        # First we'll create a lock-file, because pulling multiple VMs at the same time might cause issues.
        # This is not really thread safe... but it's better then nothing
        while [[ -f "/tmp/registry-pull-lock-${{ parameters.anka_vm_name }}" ]]; do
          echo "Lock file found... Another job on this node is pulling a tag for ${{ parameters.anka_vm_name }} and pulling a second will potentially cause corruption. Sleeping for 20 seconds..."
          sleep 20
        done
        
        # Create lock file
        touch "/tmp/registry-pull-lock-${{ parameters.anka_vm_name }}"
        
        
        # Pull latest version (if no tag specified)
        if [[ "${{parameters.anka_vm_registry_address}}" != "http://YOUR_REGISTRY_ADDR:PORT" ]]; then
          if [[ "$(arch)" == "arm64" ]]; then
            REGISTRY_OPTION="--remote ${{ parameters.anka_vm_registry_address }}"
          else
            REGISTRY_OPTION="-a ${{ parameters.anka_vm_registry_address }}"
          fi
        fi
        anka registry ${REGISTRY_OPTION:-} pull ${{ parameters.anka_vm_name }} -t ${{ parameters.anka_vm_tag_name }}
        
        # Clone template for a VM
        anka clone ${{ parameters.anka_vm_name }} ado-fastlane+$(Build.Repository.Name)_$(Build.SourceBranchName)_$(Build.SourceVersion)_$(Build.BuildNumber)_$(Agent.Name)

  - task: Bash@3
    displayName: 'ðŸ”“ Remove registry pull-lock'
    condition: always()
    inputs:
      targetType: 'inline'
      script: |
        # Make sure to always delete the lock file
        rm "/tmp/registry-pull-lock-${{ parameters.anka_vm_name }}"
        
  - task: Bash@3
    displayName: 'ðŸ›  Prepare Anka VM working directory'
    inputs:
      targetType: 'inline'
      script: |
        # Start the VM
        anka start ado-fastlane+$(Build.Repository.Name)_$(Build.SourceBranchName)_$(Build.SourceVersion)_$(Build.BuildNumber)_$(Agent.Name)

        # Copy all files from ADO work folder to ~/work/ inside the VM
        anka cp -fa ./ ado-fastlane+$(Build.Repository.Name)_$(Build.SourceBranchName)_$(Build.SourceVersion)_$(Build.BuildNumber)_$(Agent.Name):./work/ 
        
  - task: Bash@3
    displayName: 'ðŸš€ Run fastlane in Anka VM'
    inputs:
      targetType: 'inline'
      script: |
        anka run --env --no-volume --wait-network --wait-time ado-fastlane+$(Build.Repository.Name)_$(Build.SourceBranchName)_$(Build.SourceVersion)_$(Build.BuildNumber)_$(Agent.Name) bash -c "cd work
      
        # Setting up all everything
        # Set ENVs, configure Git with secrets etc.
        # Make sure Ruby is correct version
        
        # Run fastlane
        bundle install
        bundle exec fastlane ${{ parameters.lane_name }} ${{ parameters.lane_parameters }}"
        
  - task: Bash@3
    displayName: "ðŸ“¥ Copy results from Anka VM"
    inputs:
      targetType: 'inline'
      script: |
        # Copy results back to the host 
        anka cp -fa ado-fastlane+$(Build.Repository.Name)_$(Build.SourceBranchName)_$(Build.SourceVersion)_$(Build.BuildNumber)_$(Agent.Name):work/ $(Build.ArtifactStagingDirectory)/../s/vm_result/

  - ${{ if ne(parameters.publishFolder, '') }}:

    - task: PublishBuildArtifacts@1
      displayName: 'ðŸ“¦ Publish artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/../s/vm_result/${{ parameters.publishFolder }}'
        artifactFolderName: '${{ parameters.artifactFolderName }}'

  - ${{ if ne(parameters.publishTest, '') }}:
  
    - task: PublishTestResults@2
      displayName: 'ðŸŒŽ Upload test results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/../s/vm_result/${{ parameters.publishTest }}'
        testRunTitle: 'Unit Tests'

  - ${{ if ne(parameters.publishCodeCoverageFolderName, '') }}:
  
    - task: UseDotNet@2
      displayName: 'ðŸ–¥ Setting up Code Coverage'
      inputs:
        version: '5.0.x'
    - task: publishCodeCoverageFolderNameResults@1
      displayName: 'ðŸŒŽ Upload code coverage results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.ArtifactStagingDirectory)/../s/vm_result/${{ parameters.publishCodeCoverageFolderName }}/xml/cobertura.xml'
        
  - task: Bash@3
    displayName: "ðŸ—‘ Cleanup Anka VM"
    condition: always()
    inputs:
      targetType: 'inline'
      script: |
        # Always delete the VM
        anka delete --yes ado-fastlane+$(Build.Repository.Name)_$(Build.SourceBranchName)_$(Build.SourceVersion)_$(Build.BuildNumber)_$(Agent.Name)
